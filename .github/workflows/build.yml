name: Build

on:
  push:
    branches:
      - main
      - beta
      - "feature/*"
      - "fix/*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.17
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4.0.0 # https://github.com/marketplace/actions/run-golangci-lint
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest

  build:
    name: Build
    needs: [golangci]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ^1.17
        id: go
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: "5.x"
      - name: Version with GitVersion # https://github.com/marketplace/actions/use-actions
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.gitversion.outputs.FullSemVer }}
          release_branches: main
          tag_prefix: v
      - name: Check out code
        uses: actions/checkout@v4
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          fetch-depth: 0
      - name: Run tests
        run: go test -v -coverprofile=coverage.out -covermode=count -json ./... > test-report.out
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5.0.0
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Replace version in NuSpec file
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["rmstale.nuspec"]'
      - name: Create directory for chocolaty package
        run: mkdir -p ${{ github.workspace }}/bin/chocolatey
      - name: Package chocolaty binary # Output path refers to the mapped docker volume (/wksp)
        uses: crazy-max/ghaction-chocolatey@v3
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          args: pack rmstale.nuspec --outputdirectory /wksp/bin/chocolatey
      - name: Push package to chocolatey.org
        uses: crazy-max/ghaction-chocolatey@v3
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          args: push /wksp/bin/chocolatey/rmstale.${{ steps.gitversion.outputs.FullSemVer }}.nupkg --source https://push.chocolatey.org/ --apikey ${{ secrets.CHOCO_KEY }}
