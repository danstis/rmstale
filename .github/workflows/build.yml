name: Build

on:
  push:
    branches:
      - main
      - master
      - beta
      - "feature/*"
      - "fix/*"
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2 # https://github.com/marketplace/actions/run-golangci-lint
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest
  test:
    name: Test and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: "5.x"

      - name: Version with GitVersion # https://github.com/marketplace/actions/use-actions
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10

      - name: Run tests
        run: go test -v -coverprofile=coverage.out -covermode=count -json ./... > test-report.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          file: ./coverage.out # optional

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master # https://github.com/marketplace/actions/sonarcloud-scan
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.gitversion.outputs.FullSemVer }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: "5.x"

      - name: Version with GitVersion # https://github.com/marketplace/actions/use-actions
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10

      - name: Build windows x86
        run: go build -v -ldflags "-X main.AppVersion=${{ steps.gitversion.outputs.semVer }}" -o ${{ github.workspace }}/bin/windows/rmstale.exe rmstale.go
        env:
          GOOS: windows
          GOARCH: 386

      - name: Build linux x86
        run: go build -v -ldflags "-X main.AppVersion=${{ steps.gitversion.outputs.semVer }}" -o ${{ github.workspace }}/bin/linux/rmstale rmstale.go
        env:
          GOOS: linux
          GOARCH: 386

      - name: Build darwin amd64
        run: go build -v -ldflags "-X main.AppVersion=${{ steps.gitversion.outputs.semVer }}" -o ${{ github.workspace }}/bin/darwin/rmstale-darwin rmstale.go
        env:
          GOOS: darwin
          GOARCH: amd64

      - name: Replace version in NuSpec file
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["rmstale.nuspec"]'

      - name: Create directory for chocolaty package
        run: mkdir -p ${{ github.workspace }}/bin/chocolatey

      - name: Package chocolaty binary # Output path refers to the mapped docker volume (/wksp)
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: pack rmstale.nuspec --outputdirectory /wksp/bin/chocolatey

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rmstale-win-x86
          path: ${{ github.workspace }}/bin/windows/rmstale.exe

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rmstale-linux-x86
          path: ${{ github.workspace }}/bin/linux/rmstale

      - name: Upload Darwin Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rmstale-darwin-amd64
          path: ${{ github.workspace }}/bin/darwin/rmstale-darwin

      - name: Upload Chocolatey Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rmstale-chocolatey
          path: ${{ github.workspace }}/bin/chocolatey/rmstale*.nupkg

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, test, golangci]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 12

      - name: Install semantic release exec plugin
        run: npm install @semantic-release/exec -D

      - name: Release # https://github.com/semantic-release/semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Push package to chocolatey.org
        uses: crazy-max/ghaction-chocolatey@v1
        if: ${{ env.CHOCOPUBLISH == 'true' }} # Set by the semantic-release/exec plugin if a release has been created
        with:
          args: push /wksp/artifacts/rmstale-chocolatey/rmstale.${{ env.CHOCOVERSION }}.nupkg --source https://push.chocolatey.org/ --apikey ${{ secrets.CHOCO_KEY }}
