name: Winget Submission

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  winget:
    name: Publish winget package
    runs-on: windows-latest
    environment: winget
    steps:
      - name: Submit danstis.rmstale package to WinGet Community Repository
        run: |
          $ErrorActionPreference = "Stop"

          $wingetPackage = "danstis.rmstale"
          $gitToken = "${{ secrets.WINGET_PAT }}"

          $github = Invoke-RestMethod -uri "https://api.github.com/repos/danstis/rmstale/releases"

          $targetRelease = $github | Where-Object {-not $_.draft -and -not $_.prerelease} | Select -First 1
          $installerAmd64Url = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object {$_.name -match 'rmstale_.*_windows_amd64.zip'} | Select -ExpandProperty browser_download_url
          $installerArm64Url = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object {$_.name -match 'rmstale_.*_windows_arm64.zip'} | Select -ExpandProperty browser_download_url
          $installerX86Url = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object {$_.name -match 'rmstale_.*_windows_386.zip'} | Select -ExpandProperty browser_download_url
          $ver = $targetRelease.tag_name.Trim("v")

          if (-not $installerAmd64Url -or -not $installerArm64Url -or -not $installerX86Url -or -not $ver) {
            Write-Error "One or more installer URLs are empty."
          }

          # getting latest wingetcreate file
          iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
          try {
            .\wingetcreate.exe update $wingetPackage --submit --version $ver --urls $installerAmd64Url $installerArm64Url $installerX86Url --token $gitToken
          } catch {
            Write-Error "Failed to submit the winget package: $_"
          }
