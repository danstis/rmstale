version: Build.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - master
clone_folder: c:\gopath\src\github.com\danstis\rmstale
environment:
  GOPATH: c:\gopath
  APPVEYOR_RDP_PASSWORD:
    secure: wbXI5iatP54O3ymh5QhCPg==
  ChocoApiKey:
    secure: iNMxtYIBsXBiXFvLROnort/ceVDsrAVGXa6QIDznzKiBC+yCQmUl3JH6ghAwXAXh
install:
  - rm C:\Tools\GitVersion\GitVersion.exe
  - choco install gitversion.portable -pre -y
  - set PATH=%GOPATH%\bin;c:\go\bin;%USERPROFILE%\go\bin;%PATH%
  - go get -u github.com/golang/dep/cmd/dep
  - go get -u github.com/golang/lint/golint
  - go get -u honnef.co/go/tools/cmd/megacheck
  - go version
cache: c:\gopath\src\github.com\danstis\rmstale\vendor
build_script:
- ps: gitversion /output buildserver
- ps: dep ensure
- ps: Write-Host "Version detected as '$env:GitVersion_SemVer'"
test_script:
  - go test -v -coverprofile=coverage.out -covermode=count ./...
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      bash codecov.sh -f coverage.out
  - go vet ./...
  - megacheck ./...
  - ps: golint -set_exit_status $(go list ./...)
after_test:
  - ps: |
      # Build binaries
      ## Win x86
      $ENV:GOOS = "windows"; $env:GOARCH = "386"
      go build -ldflags "-X main.AppVersion=$env:GitVersion_SemVer" -o .\bin\windows\rmstale.exe rmstale.go
      7z a ("rmstale-{0}_Windows.zip" -f $env:GitVersion_SemVer) $env:APPVEYOR_BUILD_FOLDER\bin\windows\rmstale.exe

      ## Linux x86
      $ENV:GOOS = "linux"; $env:GOARCH = "386"
      go build -ldflags "-X main.AppVersion=$env:GitVersion_SemVer" -o .\bin\linux\rmstale rmstale.go
      7z a ("rmstale-{0}_Linux.zip" -f $env:GitVersion_SemVer) $env:APPVEYOR_BUILD_FOLDER\bin\linux\rmstale

      ## Mac x86
      $ENV:GOOS = "darwin"; $env:GOARCH = "386"
      go build -ldflags "-X main.AppVersion=$env:GitVersion_SemVer" -o .\bin\darwin\rmstale rmstale.go
      7z a ("rmstale-{0}_Darwin.zip" -f $env:GitVersion_SemVer) $env:APPVEYOR_BUILD_FOLDER\bin\darwin\rmstale

      ## Chocolatey Build
      # Replace version in nuspec
      $ChocoPath = "$env:APPVEYOR_BUILD_FOLDER\bin\chocolatey"
      if (!(Test-Path $ChocoPath)) { mkdir $ChocoPath }
      $content = [System.IO.File]::ReadAllText("$env:APPVEYOR_BUILD_FOLDER\rmstale.nuspec").Replace("__REPLACE_VERSION__", $env:GitVersion_LegacySemVerPadded)
      [System.IO.File]::WriteAllText("$env:APPVEYOR_BUILD_FOLDER\rmstale_build.nuspec", $content)

      try {
        $Nuspec = "$env:APPVEYOR_BUILD_FOLDER\rmstale_build.nuspec"
        choco pack $Nuspec --outputdirectory $ChocoPath
      }

      finally {
        if (Test-Path $Nuspec) {
          Remove-Item $Nuspec -Force
        }
      }
artifacts:
- path: rmstale-%GitVersion_SemVer%_Windows.zip
  name: rmstale-%GitVersion_SemVer%_Windows.zip
- path: rmstale-%GitVersion_SemVer%_Linux.zip
  name: rmstale-%GitVersion_SemVer%_Linux.zip
- path: rmstale-%GitVersion_SemVer%_Darwin.zip
  name: rmstale-%GitVersion_SemVer%_Darwin.zip
- path: '**\*.nupkg'
  name: chocolatey-rmstale.nupkg
deploy:
- provider: GitHub
  release: v$(GitVersion_SemVer)
  auth_token:
    secure: 894nMQexgT1teBa6rA9e8eXgwoezciFDn7qwBNoQYEGy8m+meziO+P+T3j8T0H1g
  artifact: /rmstale-.*/
  draft: false
  force_update: true
  on:
    appveyor_repo_tag: true        # deploy on tag push only